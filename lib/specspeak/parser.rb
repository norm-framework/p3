#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative 'lexer'
  require_relative 'nodes'

module SpecSpeak
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 70)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     4,     6,     7,     3,    10,    13,    10,    16,    13,
    19,    21,    13,    24,    21,    24 ]

racc_action_check = [
     0,     1,     3,     4,     5,     6,    10,    11,    12,    13,
    15,    16,    19,    21,    23,    24 ]

racc_action_pointer = [
    -2,     1,   nil,    -2,     3,     2,     2,   nil,   nil,   nil,
     2,     4,     3,     5,   nil,     2,     5,   nil,   nil,     8,
   nil,     6,   nil,     8,     8,   nil,   nil ]

racc_action_default = [
    -1,   -23,    -2,    -5,   -23,    -3,    -6,    27,    -4,    -7,
   -10,    -8,   -11,   -14,    -9,   -12,   -23,   -15,   -13,   -21,
   -16,   -23,   -22,   -17,   -19,   -18,   -20 ]

racc_goto_table = [
    12,    20,     2,    17,    11,     9,    15,     8,    25,    22,
    14,    23,    18,     5,    26,     1 ]

racc_goto_check = [
     6,     9,     2,     6,     5,     4,     7,     2,     9,     6,
     4,    10,     8,     3,    10,     1 ]

racc_goto_pointer = [
   nil,    15,     2,    10,    -1,    -6,   -10,    -6,    -3,   -15,
   -10 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 10, :_reduce_1,
  1, 10, :_reduce_2,
  2, 11, :_reduce_3,
  3, 11, :_reduce_4,
  0, 12, :_reduce_5,
  1, 12, :_reduce_6,
  2, 12, :_reduce_7,
  2, 13, :_reduce_8,
  3, 13, :_reduce_9,
  0, 14, :_reduce_10,
  1, 14, :_reduce_11,
  2, 14, :_reduce_12,
  3, 14, :_reduce_13,
  1, 15, :_reduce_14,
  2, 15, :_reduce_15,
  2, 16, :_reduce_16,
  2, 18, :_reduce_17,
  3, 18, :_reduce_18,
  1, 19, :_reduce_19,
  2, 19, :_reduce_20,
  1, 17, :_reduce_21,
  2, 17, :_reduce_22 ]

racc_reduce_n = 23

racc_shift_n = 27

racc_token_table = {
  false => 0,
  :error => 1,
  :MODULE => 2,
  :REQUIREMENT => 3,
  :STRING => 4,
  :EXAMPLES => 5,
  :ROW => 6,
  :CELL => 7,
  :NOTES => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "MODULE",
  "REQUIREMENT",
  "STRING",
  "EXAMPLES",
  "ROW",
  "CELL",
  "NOTES",
  "$start",
  "Root",
  "Modules",
  "ModuleBody",
  "Requirements",
  "RequirementBody",
  "Strings",
  "Examples",
  "Notes",
  "Rows",
  "Cells" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 12)
  def _reduce_1(val, _values, result)
     result = RootNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 13)
  def _reduce_2(val, _values, result)
     result = RootNode.new('', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 17)
  def _reduce_3(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_4(val, _values, result)
     result = val[1] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_5(val, _values, result)
     result = [ModuleNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_6(val, _values, result)
     result = [ModuleNode.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_7(val, _values, result)
     result = [ModuleNode.new(val[0], val[1])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_8(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 29)
  def _reduce_9(val, _values, result)
     result = val[1] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_10(val, _values, result)
     result = [RequirementNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_11(val, _values, result)
     result = [RequirementNode.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 35)
  def _reduce_12(val, _values, result)
     result = [RequirementNode.new(val[0], val[1])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_13(val, _values, result)
     result = [RequirementNode.new(val[0], val[1] + val[2])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_15(val, _values, result)
     result = "#{ val[0] }\n#{ val[1] }" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_16(val, _values, result)
     result = [ExamplesNode.new('', val[1])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_17(val, _values, result)
     result = [RowNode.new('', val[1])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_18(val, _values, result)
     result = [RowNode.new('', val[1])] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_20(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_21(val, _values, result)
     result = [NotesNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_22(val, _values, result)
     result = [NotesNode.new(val[1])] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SpecSpeak
